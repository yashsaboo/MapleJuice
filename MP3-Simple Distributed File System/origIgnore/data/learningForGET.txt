The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
v
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.

The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
v
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.

The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
v
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.

The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
v
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.

The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
The for loop works as following; it waits until somebody connects, that's what the 'server.Accept()' does, this function blocks the program until a client connects. When this happens it spawns a go routine that will handle the connection, in this case the function 'sendFileToClient()' will handle it and return back to the beginning of the loop.
